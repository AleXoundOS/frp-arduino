-- Copyright (c) 2014 Contributors as noted in the AUTHORS file
--
-- This file is part of frp-arduino.
--
-- frp-arduino is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- frp-arduino is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with frp-arduino.  If not, see <http://www.gnu.org/licenses/>.

module Arduino.Internal.CodeGen
    ( streamsToC
    ) where

import Arduino.Internal.DAG
import CCodeGen
import Control.Monad
import qualified Data.Map as M

data ResultVariable = ResultVariable String CType (Maybe String)

data CType = CBit
           | CByte
           | CNumber
           | CVoid
           deriving (Eq, Show)

streamsToC :: Streams -> String
streamsToC = runGen . genStreamsCFile

genStreamsCFile :: Streams -> Gen ()
genStreamsCFile streams = do
    header "// This file is automatically generated."
    header ""
    header "#include <avr/io.h>"
    header "#include <stdbool.h>"
    genStreamCFunctions (sortStreams streams) M.empty
    line ""
    block "int main(void) {" $ do
        mapM genInit (streamsInTree streams)
        block "while (1) {" $ do
            mapM genInputCall (filter (null . inputs) (streamsInTree streams))
        line "}"
        line "return 0;"
    line "}"

genStreamCFunctions :: [Stream] -> M.Map String CType -> Gen ()
genStreamCFunctions streams streamTypeMap = case streams of
    []                   -> return ()
    (stream:restStreams) -> do
        cType <- genStreamCFunction streamTypeMap stream
        let updateStreamTypeMap = M.insert (name stream) cType streamTypeMap
        genStreamCFunctions restStreams updateStreamTypeMap

genStreamCFunction :: M.Map String CType -> Stream -> Gen CType
genStreamCFunction streamTypes stream = do
    let inputTypes = map (streamTypes M.!) (inputs stream)
    let inputMap = M.fromList $ zip [0..] inputTypes
    let args = streamArguments streamTypes stream
    let declaration = ("static void " ++ name stream ++
                       "(" ++ streamToArgumentList streamTypes stream ++ ")")
    cFunction declaration $ do
        genStreamInputParsing args
        outputNames <- genStreamBody inputMap (body stream)
        genStreamOuputCalling outputNames stream
        return $ extractOutputType outputNames

streamArguments :: M.Map String CType -> Stream -> [(String, String, Int)]
streamArguments streamTypes =
    map (\(input, cType) -> ("input_" ++ show input, cTypeStr cType, input)) .
    zip [0..] .
    map (streamTypes M.!) .
    inputs

streamToArgumentList :: M.Map String CType -> Stream -> String
streamToArgumentList streamTypes stream
    | length (inputs stream) < 1 = ""
    | otherwise                  = "int arg, void* value"

genStreamInputParsing :: [(String, String, Int)] -> Gen ()
genStreamInputParsing args = do
    when ((length args) > 0) $ do
        forM_ args $ \(name, cType, _) -> do
            line $ "static " ++ cType ++ " " ++ name ++ ";"
        block "switch (arg) {" $ do
            forM_ args $ \(name, cType, n) -> do
                block ("case " ++ show n ++ ":") $ do
                    line $ name ++ " = *((" ++ cType ++ "*)value);"
                    line $ "break;"
        line $ "}"

genStreamBody :: M.Map Int CType -> Body -> Gen [ResultVariable]
genStreamBody inputMap body = case body of
    (Driver _ bodyLLI)     -> genLLI bodyLLI
    (Transform expression) -> genExpression inputMap expression

genStreamOuputCalling :: [ResultVariable] -> Stream -> Gen ()
genStreamOuputCalling results stream = do
    forM_ (outputs stream) $ \outputStreamName -> do
        forM_ results $ \(ResultVariable name cType condition) -> do
            case condition of
                Nothing -> do
                    generateCall outputStreamName name
                Just x -> do
                    block ("if (" ++ x ++ ") {") $ do
                        generateCall outputStreamName name
                    line "}"
    where
        generateCall (n, outputStreamName) resultVariable = do
            line (outputStreamName ++ "(" ++ show n ++ ", (void*)(&" ++ resultVariable ++ "));")

genExpression :: M.Map Int CType -> Expression -> Gen [ResultVariable]
genExpression inputMap expression = case expression of
    (Not expression) -> do
        [ResultVariable inner CBit Nothing] <- genExpression inputMap expression
        wrap CBit ("!(" ++ inner ++ ")")
    (Even expression) -> do
        [ResultVariable inner CNumber Nothing] <- genExpression inputMap expression
        wrap CBit ("(" ++ inner ++ ") % 2 == 0")
    (Greater left right) -> do
        [ResultVariable leftResult CNumber Nothing] <- genExpression inputMap left
        [ResultVariable rightResult CNumber Nothing] <- genExpression inputMap right
        wrap CBit (leftResult ++ " > " ++ rightResult)
    (Add left right) -> do
        [ResultVariable leftResult CNumber Nothing] <- genExpression inputMap left
        [ResultVariable rightResult CNumber Nothing] <- genExpression inputMap right
        wrap CNumber (leftResult ++ " + " ++ rightResult)
    (Sub left right) -> do
        [ResultVariable leftResult CNumber Nothing] <- genExpression inputMap left
        [ResultVariable rightResult CNumber Nothing] <- genExpression inputMap right
        wrap CNumber (leftResult ++ " - " ++ rightResult)
    (Input value) -> do
        return [ResultVariable ("input_" ++ show value) (inputMap M.! value) Nothing]
    (ByteConstant value) -> do
        wrap CByte (show value)
    (BoolToBit value) -> do
        genExpression inputMap value
    (IsHigh value) -> do
        genExpression inputMap value
    (BitConstant value) -> do
        case value of
            High -> (wrap CBit "true")
            Low  -> (wrap CBit "false")
    (NumberConstant value) -> do
        return [ResultVariable (show value) CNumber Nothing]
    (FoldState) -> do
        return [ResultVariable "fold_state" CNumber Nothing]
    (If conditionExpression trueExpression falseExpression) -> do
        [ResultVariable conditionResult CBit Nothing] <- genExpression inputMap conditionExpression
        [ResultVariable trueResult cType Nothing] <- genExpression inputMap trueExpression
        [ResultVariable falseResult cType Nothing] <- genExpression inputMap falseExpression
        temp <- var (cTypeStr cType)
        block ("if (" ++ conditionResult ++ ") {") $ do
            line $ temp ++ " = " ++ trueResult ++ ";"
        block "} else {" $ do
            line $ temp ++ " = " ++ falseResult ++ ";"
        line $ "}"
        return [ResultVariable temp cType Nothing]
    (Filter condition value) -> do
        [ResultVariable conditionResult CBit Nothing] <- genExpression inputMap condition
        [ResultVariable valueResult cType Nothing] <- genExpression inputMap value
        temp <- var "bool"
        line $ temp ++ " = false;"
        block ("if (" ++ conditionResult ++ ") {") $ do
            line $ temp ++ " = true;"
        line $ "}"
        return [ResultVariable valueResult cType (Just temp)]
    (Fold expression startValue) -> do
        [ResultVariable startValueResult cType Nothing] <- genExpression inputMap startValue
        line $ "static " ++ cTypeStr cType ++ " fold_state = " ++ startValueResult ++ ";"
        [ResultVariable expressionResult cType Nothing] <- genExpression inputMap expression
        line $ "fold_state = " ++ expressionResult ++ ";"
        return [ResultVariable "fold_state" cType Nothing]
    (Many values) -> do
        mapM (\x -> genExpression inputMap x >>= \[y] -> return y) values

wrap :: CType -> String -> Gen [ResultVariable]
wrap cType expression = do
    name <- var (cTypeStr cType)
    line $ name ++ " = " ++ expression ++ ";"
    return [ResultVariable name cType Nothing]

genInit :: Stream -> Gen ()
genInit stream = case body stream of
    (Driver initLLI _) -> do
        genLLI initLLI
        return ()
    _ -> do
        return ()

genInputCall :: Stream -> Gen ()
genInputCall stream = do
    line (name stream ++ "();")

genLLI :: LLI -> Gen [ResultVariable]
genLLI lli = case lli of
    (WriteBit register bit value next) ->
        case value of
            High -> do
                line (register ++ " |= (1 << " ++ bit ++ ");")
                genLLI next
            Low -> do
                line (register ++ " &= ~(1 << " ++ bit ++ ");")
                genLLI next
    (WriteByte register value next) -> do
        [ResultVariable x cType Nothing] <- genLLI value
        line (register ++ " = " ++ x ++ ";")
        genLLI next
    (WriteWord register value next) -> do
        [ResultVariable x cType Nothing] <- genLLI value
        line (register ++ " = " ++ x ++ ";")
        genLLI next
    (ReadBit register bit) -> do
        x <- var "bool"
        line $ x ++ " = (" ++ register ++ " & (1 << " ++ bit ++ ")) == 0U;"
        return [ResultVariable x CBit Nothing]
    (ReadWord register next) -> do
        x <- var "int"
        line $ x ++ " = " ++ register ++ ";"
        genLLI next
        return [ResultVariable x CNumber Nothing]
    (WaitBit register bit value next) -> do
        case value of
            High -> do
                line $ "while ((" ++ register ++ " & (1 << " ++ bit ++ ")) == 0) {"
                line $ "}"
        genLLI next
    (Switch name t f next) -> do
        [ResultVariable x cType Nothing] <- genLLI name
        block ("if (" ++ x ++ ") {") $ do
            genLLI t
        block "} else {" $ do
            genLLI f
        line "}"
        genLLI next
    (Const x) -> do
        return [ResultVariable x CBit Nothing]
    InputValue -> do
        return [ResultVariable "input_0" CBit Nothing]
    End -> do
        return []

extractOutputType :: [ResultVariable] -> CType
extractOutputType vars = case vars of
    (x:y:xs) -> if extract x == extract y
                    then extractOutputType (y:xs)
                    else error "different c types"
    [var]    -> extract var
    []       -> CVoid
    where
        extract (ResultVariable _ cType _) = cType

cTypeStr :: CType -> String
cTypeStr cType = case cType of
    CBit    -> "bool"
    CByte   -> "uint8_t"
    CNumber -> "int"
    CVoid   -> "void"
